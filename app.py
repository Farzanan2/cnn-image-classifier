# -*- coding: utf-8 -*-
"""Copy of classification_using_cnn (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZGo-VVWCAFZ9o8tE_lFC6gsGop9UcXz5
"""

import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import numpy as np

(X_train, y_train), (X_test,y_test) = datasets.cifar10.load_data()
X_train.shape

X_test.shape

y_train.shape

y_train[:5]

y_train = y_train.reshape(-1,)
y_train[:5]

y_test = y_test.reshape(-1,)

classes = ["airplane","automobile","bird","cat","deer","dog","frog","horse","ship","truck"]

def plot_sample(X, y, index):
    plt.figure(figsize = (15,2))
    plt.imshow(X[index])
    plt.xlabel(classes[y[index]])

plot_sample(X_train, y_train, 0)

plot_sample(X_train, y_train, 1)

X_train = X_train / 255.0
X_test = X_test / 255.0

ann = models.Sequential([
        layers.Flatten(input_shape=(32,32,3)),
        layers.Dense(3000, activation='relu'),
        layers.Dense(1000, activation='relu'),
        layers.Dense(10, activation='softmax')
    ])

ann.compile(optimizer='SGD',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

ann.fit(X_train, y_train, epochs=5)

from sklearn.metrics import confusion_matrix , classification_report
import numpy as np
y_pred = ann.predict(X_test)
y_pred_classes = [np.argmax(element) for element in y_pred]

print("Classification Report: \n", classification_report(y_test, y_pred_classes))

cnn = models.Sequential([
    layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(32, 32, 3)),
    layers.MaxPooling2D((2, 2)),

    layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),

    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')
])

cnn.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

cnn.fit(X_train, y_train, epochs=10)

cnn.evaluate(X_test,y_test)

y_pred = cnn.predict(X_test)
y_pred[:5]

y_classes = [np.argmax(element) for element in y_pred]
y_classes[:5]

y_test[:5]

plot_sample(X_test, y_test,3)

classes[y_classes[3]]

classes[y_classes[3]]



from pytorch_grad_cam import GradCAM
from pytorch_grad_cam.utils.image import show_cam_on_image, preprocess_image
from torchvision import transforms
import numpy as np
import cv2

# Function to get Grad-CAM overlay
def get_gradcam(input_image, model, target_layer):
    transform = transforms.Compose([
        transforms.Resize((224, 224)),  # adjust to model's input
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406],
                             [0.229, 0.224, 0.225])
    ])

    img_tensor = transform(input_image).unsqueeze(0)
    cam = GradCAM(model=model, target_layers=[target_layer], use_cuda=torch.cuda.is_available())
    grayscale_cam = cam(input_tensor=img_tensor)[0]

    img_np = np.array(input_image.resize((224, 224))) / 255.0
    cam_image = show_cam_on_image(img_np.astype(np.float32), grayscale_cam, use_rgb=True)
    return Image.fromarray(cam_image)

import cv2
import numpy as np

def is_blurry(image, threshold=100):
    img_cv = np.array(image.convert("L"))
    variance = cv2.Laplacian(img_cv, cv2.CV_64F).var()
    return variance < threshold, variance

import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import numpy as np
import gradio as gr
from PIL import Image
import cv2

# Load and preprocess CIFAR-10 data
(X_train, y_train), (X_test, y_test) = datasets.cifar10.load_data()
y_train = y_train.reshape(-1,)
y_test = y_test.reshape(-1,)
X_train = X_train / 255.0
X_test = X_test / 255.0

# Class labels
classes = ["airplane", "automobile", "bird", "cat", "deer",
           "dog", "frog", "horse", "ship", "truck"]

# Build model
cnn = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),
    layers.MaxPooling2D(2, 2),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D(2, 2),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')
])

cnn.compile(optimizer='adam',
            loss='sparse_categorical_crossentropy',
            metrics=['accuracy'])

# Load weights if available (else train)
try:
    cnn.load_weights("cnn_cifar10.weight.h5")
except:
    cnn.fit(X_train, y_train, epochs=10)
    cnn.save_weights("cnn_cifar10.weight.h5")

# Image blur detection function
def is_blurry(image):
    image_gray = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2GRAY)
    lap_var = cv2.Laplacian(image_gray, cv2.CV_64F).var()
    return lap_var < 100  # lower = blurrier

# Prediction function
def predict_with_feedback(image):
    warning = ""

    # Resize and normalize
    img = image.resize((32, 32))
    img_array = np.array(img) / 255.0

    if img_array.shape != (32, 32, 3):
        return "Error", 0.0, "Image must be 32x32 RGB."

    # Check for blur
    if is_blurry(image):
        warning += "Warning: Image appears blurry. "

    # Predict
    img_array = np.expand_dims(img_array, axis=0)
    preds = cnn.predict(img_array)[0]
    pred_index = np.argmax(preds)
    confidence = float(preds[pred_index])
    label = classes[pred_index]

    if confidence < 0.6:
        warning += "Low confidence in prediction. Try a clearer image."

    return label, confidence, warning

# Gradio interface
demo = gr.Interface(
    fn=predict_with_feedback,
    inputs=gr.Image(type="pil"),
    outputs=[
        gr.Textbox(label="Prediction"),
        gr.Number(label="Confidence"),
        gr.Textbox(label="Warnings")
    ],
    title="CNN Image Classifier with Feedback"
)

demo.launch()

# Save model
cnn.save("cnn_cifar10.h5")

# Load model
cnn = models.load_model("cnn_cifar10.h5")